#include "sort.h"
/**
 * merge - Merges two sorted sub-arrays into a single sorted array.
 * @array: The original array.
 * @left: The left sub-array.
 * @left_s: Size of the left sub-array.
 * @right: The right sub-array.
 * @right_s: Size of the right sub-array.
 */
void merge(int *array, int *left, size_t left_s, int *right, size_t right_s)
{
    size_t i = 0, j = 0, k = 0;

    while (i < left_s && j < right_s)
    {
        if (left[i] <= right[j])
        {
            array[k] = left[i];
            i++;
        }
        else
        {
            array[k] = right[j];
            j++;
        }
        k++;
    }

    while (i < left_s)
    {
        array[k] = left[i];
        i++;
        k++;
    }

    while (j < right_s)
    {
        array[k] = right[j];
        j++;
        k++;
    }
}

/**
 * merge_sort - Sorts an array of integers in ascending order using
 * the Merge sort algorithm (top-down approach).
 * @array: The array to be sorted.
 * @size: Size of the array.
 */
void merge_sort(int *array, size_t size)
{
	size_t mid, i;
	int *left, *right;

	if (array == NULL || size < 2)
		return;

	mid = size / 2;
	left = malloc(mid * sizeof(int));
	right = malloc((size - mid) * sizeof(int));

	if (left == NULL || right == NULL)
	{
		free(left);
		free(right);
		return;
	}

	for (i = 0; i < mid; i++)
	{
		left[i] = array[i];
	}

	for (i = mid; i < size; i++)
	{
		right[i - mid] = array[i];
	}

	merge_sort(left, mid);
	merge_sort(right, size - mid);

	merge(array, left, mid, right, size - mid);

	free(left);
	free(right);
}
